//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ServiceReference4 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference4.IReportMenager")]
    public interface IReportMenager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/alarmsInInterval", ReplyAction="http://tempuri.org/IReportMenager/alarmsInIntervalResponse")]
        string alarmsInInterval(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/alarmsInInterval", ReplyAction="http://tempuri.org/IReportMenager/alarmsInIntervalResponse")]
        System.Threading.Tasks.Task<string> alarmsInIntervalAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/alarmsWithPriority", ReplyAction="http://tempuri.org/IReportMenager/alarmsWithPriorityResponse")]
        string alarmsWithPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/alarmsWithPriority", ReplyAction="http://tempuri.org/IReportMenager/alarmsWithPriorityResponse")]
        System.Threading.Tasks.Task<string> alarmsWithPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/tagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/tagsInIntervalResponse")]
        string tagsInInterval(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/tagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/tagsInIntervalResponse")]
        System.Threading.Tasks.Task<string> tagsInIntervalAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/dItagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/dItagsInIntervalResponse")]
        string dItagsInInterval(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/dItagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/dItagsInIntervalResponse")]
        System.Threading.Tasks.Task<string> dItagsInIntervalAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/aItagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/aItagsInIntervalResponse")]
        string aItagsInInterval(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportMenager/aItagsInInterval", ReplyAction="http://tempuri.org/IReportMenager/aItagsInIntervalResponse")]
        System.Threading.Tasks.Task<string> aItagsInIntervalAsync(System.DateTime date1, System.DateTime date2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportMenagerChannel : ReportManager.ServiceReference4.IReportMenager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportMenagerClient : System.ServiceModel.ClientBase<ReportManager.ServiceReference4.IReportMenager>, ReportManager.ServiceReference4.IReportMenager {
        
        public ReportMenagerClient() {
        }
        
        public ReportMenagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportMenagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportMenagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportMenagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string alarmsInInterval(System.DateTime date1, System.DateTime date2) {
            return base.Channel.alarmsInInterval(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> alarmsInIntervalAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.alarmsInIntervalAsync(date1, date2);
        }
        
        public string alarmsWithPriority(int priority) {
            return base.Channel.alarmsWithPriority(priority);
        }
        
        public System.Threading.Tasks.Task<string> alarmsWithPriorityAsync(int priority) {
            return base.Channel.alarmsWithPriorityAsync(priority);
        }
        
        public string tagsInInterval(System.DateTime date1, System.DateTime date2) {
            return base.Channel.tagsInInterval(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> tagsInIntervalAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.tagsInIntervalAsync(date1, date2);
        }
        
        public string dItagsInInterval(System.DateTime date1, System.DateTime date2) {
            return base.Channel.dItagsInInterval(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> dItagsInIntervalAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.dItagsInIntervalAsync(date1, date2);
        }
        
        public string aItagsInInterval(System.DateTime date1, System.DateTime date2) {
            return base.Channel.aItagsInInterval(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> aItagsInIntervalAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.aItagsInIntervalAsync(date1, date2);
        }
    }
}
